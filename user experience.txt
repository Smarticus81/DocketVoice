This document maps the complete user experience flow for DocketVoice, showing how a user's conversation is transformed into completed bankruptcy forms through AI-powered conversation mapping.

User Journey Flow
1. Initial Setup & Welcome

UserÂ arrivesÂ â†’Â SystemÂ initializesÂ â†’Â WelcomeÂ &Â filingÂ typeÂ determination
User Experience:

User opens DocketVoice web interface
System loads voice capabilities and AI processing
Warm, professional greeting explains the 45-60 minute process
User chooses Chapter 7 or Chapter 13 (with AI guidance if needed)
Technical Mapping:


#Â FromÂ app.pyvoice_systemÂ =Â ModernRealtimeVoiceSystem(settings)production_agentÂ =Â SOTABankruptcyAgentProduction(settings,Â ai_provider,Â voice_provider)#Â FromÂ sota_agent_production.py,Â lineÂ 95asyncÂ defÂ _welcome_client(self):Â Â Â Â welcome_messageÂ =Â """Â Â Â Â Hello,Â andÂ welcomeÂ toÂ DocketVoice.Â I'mÂ hereÂ toÂ helpÂ youÂ completeÂ Â Â Â Â yourÂ bankruptcyÂ paperworkÂ throughÂ aÂ simpleÂ conversation...Â Â Â Â """
2. Document Processing Phase

UserÂ uploadsÂ documentsÂ â†’Â AIÂ extractsÂ dataÂ â†’Â FormsÂ pre-populated
User Experience:

User can upload paystubs, bank statements, tax returns, etc.
AI analyzes documents and extracts relevant information
System confirms what information was found
Technical Mapping:


#Â FromÂ sota_agent_production.py,Â lineÂ 179asyncÂ defÂ _process_uploaded_documents(self):Â Â Â Â forÂ file_pathÂ inÂ uploaded_files:Â Â Â Â Â Â Â Â extracted_dataÂ =Â awaitÂ self.document_processor.process_document(Â Â Â Â Â Â Â Â Â Â Â Â str(file_path),Â self.bankruptcy_caseÂ Â Â Â Â Â Â Â )
3. Conversational Interview Categories
Phase 3.1: Personal Information

NaturalÂ conversationÂ â†’Â AIÂ processingÂ â†’Â FormÂ B101Â fieldsÂ populated
User Experience:

"What's your full legal name?"
"What's your current address?"
"Are you married?"
"Do you have any dependents?"
Form Mapping:


#Â MapsÂ toÂ bankruptcy_case.form_b101.debtor_info{Â Â Â Â "DebtorInfo.first_name":Â user_answerÂ â†’Â AIÂ extractsÂ â†’Â form_b101.debtor_info.first_name,Â Â Â Â "DebtorInfo.last_name":Â user_answerÂ â†’Â AIÂ extractsÂ â†’Â form_b101.debtor_info.last_name,Â Â Â Â "DebtorInfo.address":Â user_answerÂ â†’Â AIÂ extractsÂ â†’Â form_b101.debtor_info.address,Â Â Â Â "B101.marital_status":Â user_answerÂ â†’Â AIÂ extractsÂ â†’Â form_b101.marital_status}
Phase 3.2: Income & Employment

"TellÂ meÂ aboutÂ yourÂ job"Â â†’Â AIÂ extractsÂ incomeÂ dataÂ â†’Â ScheduleÂ IÂ populated
User Experience:

"Tell me about your current job and income"
"Do you have any other sources of income?"
"What do you make per month after taxes?"
Form Mapping:


#Â MapsÂ toÂ bankruptcy_case.form_b121.debtor_incomeÂ (ScheduleÂ I){Â Â Â Â "MonthlyIncome.employment_income":Â "IÂ makeÂ $3,500/month"Â â†’Â Decimal('3500'),Â Â Â Â "MonthlyIncome.other_income":Â "IÂ getÂ $200Â inÂ sideÂ work"Â â†’Â Decimal('200'),Â Â Â Â "DebtorInfo.employer":Â "IÂ workÂ atÂ ABCÂ Company"Â â†’Â "ABCÂ Company"}
Phase 3.3: Monthly Expenses

"WhatÂ areÂ yourÂ monthlyÂ expenses?"Â â†’Â AIÂ categorizesÂ â†’Â ScheduleÂ JÂ populated
User Experience:

"What's your monthly rent or mortgage payment?"
"How much do you spend on food each month?"
"What about utilities, car payments, insurance?"
Form Mapping:


#Â MapsÂ toÂ bankruptcy_case.form_b121.monthly_expensesÂ (ScheduleÂ J){Â Â Â Â "MonthlyExpenses.rent_mortgage":Â "MyÂ rentÂ isÂ $1,200"Â â†’Â Decimal('1200'),Â Â Â Â "MonthlyExpenses.food":Â "AboutÂ $400Â forÂ groceries"Â â†’Â Decimal('400'),Â Â Â Â "MonthlyExpenses.utilities":Â "ElectricÂ andÂ gasÂ isÂ maybeÂ $150"Â â†’Â Decimal('150')}
Phase 3.4: Assets & Property

"WhatÂ doÂ youÂ own?"Â â†’Â AIÂ categorizesÂ assetsÂ â†’Â ScheduleÂ A/BÂ populated
User Experience:

"Do you own a home, car, or other valuable property?"
"What about bank accounts, investments, or retirement funds?"
"Any jewelry, electronics, or collectibles worth mentioning?"
Form Mapping:


#Â MapsÂ toÂ bankruptcy_case.schedule_abÂ (ScheduleÂ A/BÂ -Â Property){Â Â Â Â "Assets.real_estate":Â "IÂ ownÂ aÂ houseÂ worthÂ aboutÂ $200,000"Â â†’Â Â Â Â Â Â Â Â Â schedule_ab.real_estate.append({"description":Â "PrimaryÂ residence",Â "value":Â Decimal('200000')}),Â Â Â Â "Assets.vehicles":Â "2018Â HondaÂ Civic,Â maybeÂ worthÂ $15,000"Â â†’Â Â Â Â Â Â Â Â schedule_ab.vehicles.append({"description":Â "2018Â HondaÂ Civic",Â "value":Â Decimal('15000')})}
Phase 3.5: Debts & Creditors

"WhoÂ doÂ youÂ oweÂ moneyÂ to?"Â â†’Â AIÂ categorizesÂ debtsÂ â†’Â ScheduleÂ D/E/FÂ populated
User Experience:

"Tell me about your credit card debts"
"Any medical bills or other unsecured debts?"
"Do you have a mortgage, car loan, or other secured debts?"
Form Mapping:


#Â MapsÂ toÂ bankruptcy_case.schedule_d/schedule_efÂ (Creditors){Â Â Â Â "Debts.credit_cards":Â "IÂ oweÂ ChaseÂ aboutÂ $8,500Â andÂ CapitalÂ OneÂ $3,200"Â â†’Â Â Â Â Â Â Â Â schedule_ef.unsecured_debts.append([Â Â Â Â Â Â Â Â Â Â Â Â {"creditor":Â "Chase",Â "balance":Â Decimal('8500'),Â "secured":Â False},Â Â Â Â Â Â Â Â Â Â Â Â {"creditor":Â "CapitalÂ One",Â "balance":Â Decimal('3200'),Â "secured":Â False}Â Â Â Â Â Â Â Â ]),Â Â Â Â "Debts.mortgage":Â "IÂ oweÂ $180,000Â onÂ myÂ houseÂ toÂ WellsÂ Fargo"Â â†’Â Â Â Â Â Â Â Â schedule_d.secured_debts.append({Â Â Â Â Â Â Â Â Â Â Â Â "creditor":Â "WellsÂ Fargo",Â "balance":Â Decimal('180000'),Â "secured":Â TrueÂ Â Â Â Â Â Â Â })}
4. AI Processing Engine
Conversation Processing Flow

#Â FromÂ sota_agent_production.py,Â lineÂ 345asyncÂ defÂ _process_response(self,Â field_key:Â str,Â response:Â str,Â original_question:Â str):Â Â Â Â processing_promptÂ =Â f"""Â Â Â Â YouÂ areÂ processingÂ aÂ bankruptcyÂ formÂ response.Â Â Â Â Â Â Â Â Â Field:Â {field_key}Â Â Â Â Question:Â {original_question}Â Â Â Â UserÂ Response:Â {response}Â Â Â Â Â Â Â Â ExtractÂ theÂ appropriateÂ valueÂ forÂ thisÂ field...Â Â Â Â """Â Â Â Â Â Â Â Â ai_responseÂ =Â awaitÂ self.ai.chat_completion([Â Â Â Â Â Â Â Â {"role":Â "system",Â "content":Â processing_prompt},Â Â Â Â Â Â Â Â {"role":Â "user",Â "content":Â response}Â Â Â Â ],Â temperature=0.1)
Field Application Logic

#Â FromÂ sota_agent_production.py,Â lineÂ 395asyncÂ defÂ _apply_response_to_case(self,Â field_key:Â str,Â value:Â Any):Â Â Â Â partsÂ =Â field_key.split('.')Â Â Â Â Â Â Â Â obj_mappingÂ =Â {Â Â Â Â Â Â Â Â "DebtorInfo":Â self.bankruptcy_case.form_b101.debtor_info,Â Â Â Â Â Â Â Â "MonthlyIncome":Â self.bankruptcy_case.form_b121.debtor_income,Â Â Â Â Â Â Â Â "MonthlyExpenses":Â self.bankruptcy_case.form_b121.monthly_expenses,Â Â Â Â Â Â Â Â #Â ...Â moreÂ mappingsÂ Â Â Â }Â Â Â Â Â Â Â Â target_objÂ =Â obj_mapping.get(obj_name)Â Â Â Â ifÂ target_objÂ andÂ hasattr(target_obj,Â field_name):Â Â Â Â Â Â Â Â setattr(target_obj,Â field_name,Â value)
5. Real-Time Form Completion Status
User Experience:

"We're making great progress. About 65% complete with the forms."
Progress updates throughout conversation
Real-time validation and error checking
Technical Implementation:


#Â ProgressÂ trackingcompletionÂ =Â self.bankruptcy_case.get_completion_status()avg_completionÂ =Â sum(completion.values())Â /Â len(completion)#Â FromÂ app.pyÂ APIÂ endpoint@app.route('/api/case-status',Â methods=['GET'])defÂ get_case_status():Â Â Â Â returnÂ jsonify({Â Â Â Â Â Â Â Â "completion_percentage":Â avg_completionÂ *Â 100,Â Â Â Â Â Â Â Â "forms_completed":Â sum(1Â forÂ vÂ inÂ completion_status.values()Â ifÂ vÂ >Â 80),Â Â Â Â Â Â Â Â "ready_for_filing":Â current_case.is_ready_for_filing()Â Â Â Â })
6. Document Generation Phase
User Experience:

"Excellent! Now I'm generating all your bankruptcy documents."
System creates official PDF forms
User receives completed forms ready for attorney review
Technical Mapping:


#Â FromÂ sota_agent_production.py,Â lineÂ 420asyncÂ defÂ _generate_all_documents(self)Â ->Â List[str]:Â Â Â Â forms_to_generateÂ =Â [Â Â Â Â Â Â Â Â ("B101",Â "OfficialÂ FormÂ B101Â -Â VoluntaryÂ Petition"),Â Â Â Â Â Â Â Â ("B106",Â "OfficialÂ FormÂ B106Â -Â DeclarationÂ AboutÂ IndividualÂ Debtor"),Â Â Â Â Â Â Â Â ("B107",Â "OfficialÂ FormÂ B107Â -Â StatementÂ ofÂ FinancialÂ Affairs"),Â Â Â Â Â Â Â Â ("B121",Â "OfficialÂ FormÂ B121Â -Â StatementÂ ofÂ IncomeÂ andÂ MeansÂ Test"),Â Â Â Â Â Â Â Â ("B122",Â "OfficialÂ FormÂ B122Â -Â StatementÂ ofÂ CurrentÂ MonthlyÂ Income")Â Â Â Â ]
7. Final Review & Completion
User Experience:

Comprehensive summary of completed forms
Explanation of next steps with attorney
Final opportunity to add information
Form Completion Summary:


âœ…Â FormÂ B101Â (Petition):Â 98%Â completeâœ…Â ScheduleÂ IÂ (Income):Â 95%Â completeÂ Â âœ…Â ScheduleÂ JÂ (Expenses):Â 92%Â completeâœ…Â ScheduleÂ A/BÂ (Property):Â 90%Â completeâœ…Â ScheduleÂ D/E/FÂ (Creditors):Â 94%Â completeğŸ“‹Â ReadyÂ forÂ attorneyÂ review
Technical Architecture Summary
Data Flow

UserÂ SpeechÂ â†’Â WebRTCÂ â†’Â OpenAIÂ RealtimeÂ APIÂ â†’Â FunctionÂ CallsÂ â†’Â ProductionÂ AgentÂ â†’Â AIÂ ProcessingÂ â†’Â FieldÂ MappingÂ â†’Â BankruptcyÂ FormsÂ â†’Â PDFÂ GenerationÂ â†’Â CompletedÂ Documents
Key Mapping Components
sota_agent_production.py - Main conversation orchestration
sota_forms_complete.py - Official form data structures
app.py - API endpoints and function call routing
sota_voice.py - Real-time voice processing
sota_document_processor.py - Document analysis and extraction
Form Mapping Logic Location
The specific conversation-to-form mapping logic is primarily in:

_apply_response_to_case() method (line 395)
obj_mapping dictionary defining form relationships
AI processing prompts that extract structured data from natural language
This creates a seamless user experience where natural conversation is automatically transformed into legally compliant bankruptcy forms.